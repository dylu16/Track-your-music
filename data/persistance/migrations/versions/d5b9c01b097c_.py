"""empty message

Revision ID: d5b9c01b097c
Revises: d6eec118cab5
Create Date: 2020-07-29 20:49:53.276659

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd5b9c01b097c'
down_revision = 'd6eec118cab5'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('song',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('song_name', sa.String(length=250), nullable=False),
    sa.Column('fingerprinted', sa.SmallInteger(), nullable=False),
    sa.Column('file_sha1', sa.Binary(), nullable=False),
    sa.Column('total_hashes', sa.Integer(), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('date_modified', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('file_sha1')
    )
    op.drop_index('ix_fingerprints_hash', table_name='fingerprints')
    op.drop_table('fingerprints')
    op.drop_table('songs')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('songs',
    sa.Column('song_id', sa.INTEGER(), server_default=sa.text("nextval('songs_song_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('song_name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('fingerprinted', sa.SMALLINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('file_sha1', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('total_hashes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('date_created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('date_modified', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('song_id', name='pk_songs_song_id'),
    postgresql_ignore_search_path=False
    )
    op.create_table('fingerprints',
    sa.Column('hash', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('song_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('offset', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('date_modified', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['song_id'], ['songs.song_id'], name='fk_fingerprints_song_id', ondelete='CASCADE'),
    sa.UniqueConstraint('song_id', 'offset', 'hash', name='uq_fingerprints')
    )
    op.create_index('ix_fingerprints_hash', 'fingerprints', ['hash'], unique=False)
    op.drop_table('song')
    # ### end Alembic commands ###
